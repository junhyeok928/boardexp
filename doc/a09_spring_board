# 답변형게시판
1. 주요 기능
	0) 로그인 통해서 session 처리
	1) 등록된 게시물 리스트
		- 조회 : 작성자/제목(조회항목) 
				제목, 작성자, 등록일, 조회수(리스트)
				- 최근글 표시 (new)
		- 페이지 처리 : 한 화면에서 보일 수 있는 게시물 설정
			하단에 페이징 리스트 처리
	2) 글등록 : 제목, 작성자(session id), 
		      내용, 첨부파일, (등록일, 수정일, 조회수)
	3) 글상세 : 제목, 작성자, 등록일, 수정일, 조회수
			내용, 첨부파일
		기능 버튼 : 수정, 삭제, 답글(등록자만이 수정/삭제 가능하게 처리) 
	4) 답글화면 : 답글 클릭시, 제목:RE:, 내용 : 이전글 내용 표시
			하여, 답글을 등록할 수 있게 처리 화면 (글등록 화면을 활용)		
2. 개발 순서(전체)
	1) DB 설계
		메인 게시판 테이블
			create table board(
				no number primary key,
				refno number,
				title varchar2(100),
				writer varchar2(100),
				content varchar2(2000),
				regdte date,
				uptdte date,
				readcnt number
			);
			create sequence board_seq
				start with 1
				minvalue 1;
			insert into board values(board_seq.nextval, 0, '초기화면','홍길동',
				'내용', sysdate, sysdate, 0);							
		첨부파일 테이블
		참고(member-아이디,패스워드,이름,권한,포인트)
		board sequence
			create sequence board_seq
				start with 1
				minvalue 1;
		- 화면 개발 순서별 sql 작성과 vo 작성
			insert into board values(board_seq.nextval, 0, '초기화면','홍길동',
				'내용', sysdate, sysdate, 0);
	2) 초기 리스트 메인화면
		- 기본 sql : 
			select * 
			from board 
			where writer like '%%' and title like '%%'
			order no desc;
		----------------------	
		- vo : 리스트와 조회  board.a04_vo.Board.java
		- dao/mapper
			public List<Board> getBoardList(Board sch);
		----------------- 2/3 조 제출
		
		- service/controller
		- controller - 게시판 전체 공통 controller url : /board.do
			각 기능별 메서드 method=list, method=insertFrm, method=insert
						  method=detail, method=update, method=delete
			// http://localhost:7080/springweb/board.do?method=list
			public String boardList(Board sch, Model d){
				d.addAttribute("boardList, service.getBoardList(sch))
				return "";
			}					  
		- view(jsp)
			- 조회 form 화면 구성
			- 데이터 리스트 테이블 구성
				<c:forEach var="board" items="${boardList}">
	3) 등록 처리 
		- 기본 처리 프로세스
			등록 버튼 클릭시, 컨트롤러 호출(등록화면), 등록 화면 로딩
			데이터 입력, 파일 첨부
			등록 컨트롤러 호출
			서비스, dao(게시판등록, 첨부파일정보등록)
			등록완료 메시지 보이기
		- 등록 개발 순서
			사용할 sql : board, fileInfo 파일정보DB
				insert into board values(board_seq.nextval, 0, '초기화면','홍길동',
				'내용', sysdate, sysdate, 0);
				INSERT INTO fileInfo values(#{fno}, #{pathinfo},
					#{fname},sysdate,sysdate,#{etc})
				public void insertBoard(Board ins);
				public void insertFileInfo(FileInfo ins);				
			dto(데이터 전송 관련) vo 확인
			dao/mapper 작성
			---------------------
			a01_boardList.jsp
				1) 등록 버튼 클릭시, 등록하시겠습니까? confirm
					location.href="${path}/board/board.do?method=inserFrm";
			
			service/controller
				methods=insert  
				/board/board.do?method=insertFrm	
					 a02_boardInsert.jsp 등록 화면 호출..
				/board/board.do?method=insert	
					등록 msg 모델로 설정.	
			화면처리(jsp) a02_boardInsert.jsp
				기본데이터 입력 name : 제목, 내용, 작성자(추후session), 
				첨부파일에 대한 내용
				form 속성
				필수항목 check 후, submit 클릭시,
				 /board/board.do?method=insert 호출
			등록 처리 후, script 처리..
				등록했습니다. 계속하시겠습니까?
			service ==> controller 호출. 
				/board/board.do?method=insert  기능 메서드.
				service.insertBoard(insert);	
			------------------------
			2/3조 제출하세요.
			
# 첨부파일 처리.
0. 컨테이너 : 파일업로드 뷰와 다운로드 뷰 bean으로 선언..
1. 뷰단
	form action="multipart/form-data
2. VO 요청값으로 파일을 처리할 수 있게
	MultipartFile 객체 선언
3. service단
	1) 파일 업로드 처리..
		경로명 (설정), 파일명
		File 객체 생성.
		MultiPartFile ==> File로 전환.
		문제 발생시, 메시지를 리턴하여 예외 처리 .
		
	2) 첨부파일 처리 데이터 입력..
		dao의 첨부파일 처리..	
4. 다중 파일 첨부를 위한 개발
	1) Vo MultiPartFile[] 선언
	2) 화면 ui를 동적으로 파일 첨부를 하게 처리
	3) service 안에 여러 개 파일이 등록 반복 
		- upload
		- dao	
				
# 게시판 상세 내용 리스트 및 파일다운로드 처리
0. 주요파일 및 VO
	BoardController.java
		상세화면 @RequestMapping(params="method=detail")
	BoardDao.java
		public Board getBoard(int empno);
	BoardMapper.xml
	\views\a01_boardList.jsp
	\views\a03_boardDetail.jsp	
			
1. 처리 프로세스
	1) 리스트 화면에서 리스트 데이터 더블 클릭시, empno를 요청값을 넘기면서
		controller 호출
	2) 컨트롤러 호출되어 service, dao, mapper를 호출 하여 empno 값을 넘겨
		단일 데이터를 가져오고,
		- 데이터 정보 가져오기
		- 파일 정보 가져오기.
	3) 컨트롤러에 모델 데이터로 Board정보와 파일명에 정보를 설정 처리
	4) 화면에 상세 정보를 가져와서 출력한다.	
2. 개발 순서
	0) controller 선언
		@RequestMapping(params="method=detail")
		int no 요청값을 가져와서.
		\views\a03_boardDetail.jsp 생성하여, 상세화면에 no가 출력되게 처리
	1) 리스트 화면에서 controller 호출
		location.href="${path}/board.do?method=detail&no="+no
	==========================================================		
		
	2) dao, mapper
		sql = select * from board where no = ?	
			  select * from fileinfo where fno= ?
		public Board getBoard(int no);
		public FileInfo getFileInfo(int fno);
	3) service, dao
	=============================================
	4) controller 
		d.addAttribute("board",service.getBoard(no));
		d.addAttribute("files",service.getFileInfo(no));
	5) view
		<input name="no" value="${board.no}"/>	
		<input name="title" value="${board.title}"/>
		모델 데이터 화면에 출력하기..	
	==================== 2/3조 ========================							
# 삭제
1. 프로세스
	1) 삭제 클릭시
	2) 삭제 컨트롤러 호출
	3) service ==> dao ==> mapper
	4) 컨트롤러 
		모델 데이터 삭제완료
	5) 화면단 삭제완료. msg 표현.
2. 개발순서
	0) controller
		method=del
		int no
	1) 삭제버튼 클릭 03_boardDetail.jsp
		location.href="${path}/board.do?method=del&no="+$("[name=no]").val();
	2) controller
		번호 확인
	3) 화면에서
		var msg = "${msg}"
		if(msg !=""){
			alert(msg+"\n조회화면 이동"))
			location.href="${path}/board.do?method=list";
		}
	4) sql : delete from board where no=#{no}
	5) dao/mapper
		public void deleteBoard(int no)
	6) service ==> controller	
	=============5조===========	
		
# 게시판 세션로그인 처리 및 권한에 따른 기능 처리
1. 주요기능
	1) 초기화면에 session값이 없으면 로그인 처리
	2) 로그인으로 DB에 사용자 정보 불러와서 session 값으로 설정.
		- 로그인 실패시, 다시 인증 과정 거치게 처리
	3) 글등록시, 등록자를 session의 id값으로 자동 설정..
	4) 글 수정/삭제 버튼 클릭시, 현재 session과 작성자의 값을 비교하여
		등록자일 때만 수정/삭제 처리가능하게 처리..  			
2. 프로세스 순서
	1) controller list 화면 호출
	2) view단에서 session값 (member.id)가 없으면, 로그인 하겠습니다.
		표시면, 로그인 팝업창(dialogue) 로딩
	3) 아이디 패스워드 입력 로그인 버튼 클릭
	4) 로그인 controller 호출, 
		id, pass로 DB 확인, 있으면
		msg로 로그인 성공 및 session값설정
		없으면, 로그인 실패 list 화면들어가서 login 다이얼로그 박스 로딩
	5) 로그인 성공하면, 상단에 @@ 로그인 중 표기
	6) 등록시, 작성자 자동으로 로그인 아이디값 입력
	7) 수정/삭제 버튼 클릭시, 현재 로그인 session 아이디와, 같은지 여부를 확인해서
		권한 있는지 alert()로딩
3. 개발 순서(\A07_SessionController.java 참고)	
	1) controller 단 session 처리 - sessionattribute, modelattribute
		@SessionAttributes("member")
		
		@ModelAttribute("member")
		public Member getMember() {
			return new Member();
		}
	
	2) controller단 로그인 처리 url mapping 메서드 선언.
		@RequestMapping(params="method=login")
		public String login(@ModelAttribute("member") Member member, Model d) {
			d.addAttribute("loginMsg", "로그인 성공");
			return "forward:/board.do?method=list";
		}	
		- 로그인성공/실패에 따른 loginMsg 모델 처리
	3) jsp(list) 
		- session값 있는 여부에 따른 메시지 처리(js)
		- 로그인 성공 여부에 따른 loginMsg 메시지 처리(js)
			실패시는 다시 로그인 dialogue 박스 로딩 처리.
		var loginMsg="${loginMsg}";
		if(loginMsg!=""){
			alert(loginMsg)
		}
		// login 후 session이 있을 때..
		var hasSession="${member.id}";
		console.log(hasSession);
		if(hasSession==""){ // session값이 없을 때..
			alert("로그인이 필요합니다!");
			$("#loginBtn").click(); // 다이얼로그 박스로딩..
		}
  		<p align="right">
  			<c:if test="${not empty member.id}">
  			${member.id} 로그인중<br>
  		</c:if>					
		<form id="frm02" class="form" action="${path}/board.do?method=login" method="post">
        	<button type="button" id="login"  class="btn btn-primary">로그인</button>
        <script>
        	$("#login").click(function(){ 
        		$("#frm02").submit();
        	});
        </script>				
	================================================
	4) 데이터베이스 처리
		- db 설계 및 sql 작성
			member테이블 확인 및 작성
			select * from member where id=#{id} and pass=#{pass}
		- vo 작성 
			Member
				private String id;
				private String pass;
				private String name;
				private String auth;
				private int point;
		- dao/mapper 작성
			public Member login(Member login);
		- service/controller 호출.
		- controller에 모델 데이터 설정
			Member m = service.login(member);
			if(m!=null){
				// 로그인 성공
				d.addAttribute("member",service.login(member));
			}else{
				d.addAttribute("loginMsg", "로그인 실패");
			}
			return "forward:/board.do?method=list";
		- 화면단에 member.id ==> member.name		
		=== 2/3조 =====				
								 	
				
		
		
		
		
		
			   
					
	 
	
	
	
	
	

3. 